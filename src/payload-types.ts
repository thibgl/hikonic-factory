/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    blocks: Block;
    indexes: Index;
    pages: Page;
    tokens: Token;
    items: Item;
    iconifySets: IconifySet;
    skeletonThemes: SkeletonTheme;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    indexes: {
      'related.products': 'pages';
      'related.neighbors': 'pages';
      'related.tokens': 'tokens';
    };
    pages: {
      'related.neighbors': 'pages';
      'related.items': 'items';
    };
    tokens: {
      'related.products': 'items';
      'related.neighbors': 'items';
      'related.indexes': 'indexes';
    };
    items: {
      'related.neighbors': 'items';
      'related.pages': 'pages';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    blocks: BlocksSelect<false> | BlocksSelect<true>;
    indexes: IndexesSelect<false> | IndexesSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    tokens: TokensSelect<false> | TokensSelect<true>;
    items: ItemsSelect<false> | ItemsSelect<true>;
    iconifySets: IconifySetsSelect<false> | IconifySetsSelect<true>;
    skeletonThemes: SkeletonThemesSelect<false> | SkeletonThemesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    website: Website;
    iconify: Iconify;
    skeleton: Skeleton;
  };
  globalsSelect: {
    website: WebsiteSelect<false> | WebsiteSelect<true>;
    iconify: IconifySelect<false> | IconifySelect<true>;
    skeleton: SkeletonSelect<false> | SkeletonSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blocks".
 */
export interface Block {
  id: string;
  block?:
    | {
        text?: string | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'text';
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "indexes".
 */
export interface Index {
  id: string;
  producing?: boolean | null;
  title: string;
  slug: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  illustration?: (string | null) | Media;
  icon?: {
    custom?: boolean | null;
    set?: string | null;
    icon?: string | null;
    svg?: string | null;
    customSvg?: string | null;
  };
  layout?: {
    hero?:
      | {
          preset?: (string | null) | Block;
          header?: string | null;
          body?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          component?:
            | {
                items?: (string | Item)[] | null;
                id?: string | null;
                blockName?: string | null;
                blockType: 'Wall';
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    main?:
      | {
          preset?: (string | null) | Block;
          header?: string | null;
          body?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          component?:
            | {
                items?: (string | Item)[] | null;
                id?: string | null;
                blockName?: string | null;
                blockType: 'Wall';
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    footer?:
      | {
          preset?: (string | null) | Block;
          header?: string | null;
          body?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          component?:
            | {
                items?: (string | Item)[] | null;
                id?: string | null;
                blockName?: string | null;
                blockType: 'Wall';
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  childrenLayout?: {
    hero?:
      | {
          header?: string | null;
          body?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          component?:
            | {
                factory?: {
                  relationTo: 'tokens';
                  value: string | Token;
                } | null;
                factoryId?: string | null;
                id?: string | null;
                blockName?: string | null;
                blockType: 'Wall';
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    main?:
      | {
          header?: string | null;
          body?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          component?:
            | {
                factory?: {
                  relationTo: 'tokens';
                  value: string | Token;
                } | null;
                factoryId?: string | null;
                id?: string | null;
                blockName?: string | null;
                blockType: 'Wall';
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    footer?:
      | {
          preset?: (string | null) | Block;
          header?: string | null;
          body?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          component?:
            | {
                items?: (string | Item)[] | null;
                id?: string | null;
                blockName?: string | null;
                blockType: 'Wall';
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  seo?: {
    qa?: boolean | null;
    title?: string | null;
    image?: (string | null) | Media;
    description?: string | null;
    keywords?:
      | {
          keyword?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  meta?: {
    neighbors?: (string | Index)[] | null;
    tokens?: (string | Token)[] | null;
  };
  related?: {
    products?: {
      docs?: (string | Page)[] | null;
      hasNextPage?: boolean | null;
    } | null;
    neighbors?: {
      docs?: (string | Page)[] | null;
      hasNextPage?: boolean | null;
    } | null;
    tokens?: {
      docs?: (string | Token)[] | null;
      hasNextPage?: boolean | null;
    } | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "items".
 */
export interface Item {
  id: string;
  factoryData?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  factory: string | Token;
  factoryId?: string | null;
  updated?: boolean | null;
  title: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  illustration?: (string | null) | Media;
  icon?: {
    custom?: boolean | null;
    set?: string | null;
    icon?: string | null;
    svg?: string | null;
    customSvg?: string | null;
  };
  colors?: string[] | null;
  meta?: {
    neighbors?: (string | Item)[] | null;
    pages?: (string | Page)[] | null;
  };
  related?: {
    neighbors?: {
      docs?: (string | Item)[] | null;
      hasNextPage?: boolean | null;
    } | null;
    pages?: {
      docs?: (string | Page)[] | null;
      hasNextPage?: boolean | null;
    } | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tokens".
 */
export interface Token {
  id: string;
  producing?: boolean | null;
  title: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  illustration?: (string | null) | Media;
  options?: {
    icon?: boolean | null;
    colors?: ('1' | '2' | '3') | null;
  };
  meta?: {
    neighbors?: (string | Token)[] | null;
    indexes?: (string | Index)[] | null;
  };
  related?: {
    products?: {
      docs?: (string | Item)[] | null;
      hasNextPage?: boolean | null;
    } | null;
    neighbors?: {
      docs?: (string | Item)[] | null;
      hasNextPage?: boolean | null;
    } | null;
    indexes?: {
      docs?: (string | Index)[] | null;
      hasNextPage?: boolean | null;
    } | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  factoryData?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  factory: string | Index;
  factoryId?: string | null;
  updated?: boolean | null;
  title: string;
  slug: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  illustration?: (string | null) | Media;
  layout?: {
    beforeMain?:
      | {
          preset?: (string | null) | Block;
          header?: string | null;
          body?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          component?:
            | {
                items?: (string | Item)[] | null;
                id?: string | null;
                blockName?: string | null;
                blockType: 'Wall';
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    afterMain?:
      | {
          preset?: (string | null) | Block;
          header?: string | null;
          body?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          component?:
            | {
                items?: (string | Item)[] | null;
                id?: string | null;
                blockName?: string | null;
                blockType: 'Wall';
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  seo?: {
    qa?: boolean | null;
    title?: string | null;
    image?: (string | null) | Media;
    description?: string | null;
    keywords?:
      | {
          keyword?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  meta?: {
    neighbors?: (string | Page)[] | null;
    items?: (string | Item)[] | null;
  };
  related?: {
    neighbors?: {
      docs?: (string | Page)[] | null;
      hasNextPage?: boolean | null;
    } | null;
    items?: {
      docs?: (string | Item)[] | null;
      hasNextPage?: boolean | null;
    } | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "iconifySets".
 */
export interface IconifySet {
  id: string;
  name: string;
  prefix: string;
  packageVersion: string;
  homepage?: string | null;
  category?: string | null;
  total?: number | null;
  version?: string | null;
  author: string;
  license: string;
  filters?: {
    prefixes?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    suffixes?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    categories?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  icons?: {
    width?: number | null;
    height?: number | null;
    options?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  categories?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skeletonThemes".
 */
export interface SkeletonTheme {
  id: string;
  name: string;
  label: string;
  default: boolean;
  enhancements: boolean;
  colors?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  source:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'blocks';
        value: string | Block;
      } | null)
    | ({
        relationTo: 'indexes';
        value: string | Index;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'tokens';
        value: string | Token;
      } | null)
    | ({
        relationTo: 'items';
        value: string | Item;
      } | null)
    | ({
        relationTo: 'iconifySets';
        value: string | IconifySet;
      } | null)
    | ({
        relationTo: 'skeletonThemes';
        value: string | SkeletonTheme;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blocks_select".
 */
export interface BlocksSelect<T extends boolean = true> {
  block?:
    | T
    | {
        text?:
          | T
          | {
              text?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "indexes_select".
 */
export interface IndexesSelect<T extends boolean = true> {
  producing?: T;
  title?: T;
  slug?: T;
  description?: T;
  illustration?: T;
  icon?:
    | T
    | {
        custom?: T;
        set?: T;
        icon?: T;
        svg?: T;
        customSvg?: T;
      };
  layout?:
    | T
    | {
        hero?:
          | T
          | {
              preset?: T;
              header?: T;
              body?: T;
              component?:
                | T
                | {
                    Wall?:
                      | T
                      | {
                          items?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              id?: T;
            };
        main?:
          | T
          | {
              preset?: T;
              header?: T;
              body?: T;
              component?:
                | T
                | {
                    Wall?:
                      | T
                      | {
                          items?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              id?: T;
            };
        footer?:
          | T
          | {
              preset?: T;
              header?: T;
              body?: T;
              component?:
                | T
                | {
                    Wall?:
                      | T
                      | {
                          items?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              id?: T;
            };
      };
  childrenLayout?:
    | T
    | {
        hero?:
          | T
          | {
              header?: T;
              body?: T;
              component?:
                | T
                | {
                    Wall?:
                      | T
                      | {
                          factory?: T;
                          factoryId?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              id?: T;
            };
        main?:
          | T
          | {
              header?: T;
              body?: T;
              component?:
                | T
                | {
                    Wall?:
                      | T
                      | {
                          factory?: T;
                          factoryId?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              id?: T;
            };
        footer?:
          | T
          | {
              preset?: T;
              header?: T;
              body?: T;
              component?:
                | T
                | {
                    Wall?:
                      | T
                      | {
                          items?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              id?: T;
            };
      };
  seo?:
    | T
    | {
        qa?: T;
        title?: T;
        image?: T;
        description?: T;
        keywords?:
          | T
          | {
              keyword?: T;
              id?: T;
            };
      };
  meta?:
    | T
    | {
        neighbors?: T;
        tokens?: T;
      };
  related?:
    | T
    | {
        products?: T;
        neighbors?: T;
        tokens?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  factoryData?: T;
  factory?: T;
  factoryId?: T;
  updated?: T;
  title?: T;
  slug?: T;
  description?: T;
  illustration?: T;
  layout?:
    | T
    | {
        beforeMain?:
          | T
          | {
              preset?: T;
              header?: T;
              body?: T;
              component?:
                | T
                | {
                    Wall?:
                      | T
                      | {
                          items?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              id?: T;
            };
        afterMain?:
          | T
          | {
              preset?: T;
              header?: T;
              body?: T;
              component?:
                | T
                | {
                    Wall?:
                      | T
                      | {
                          items?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              id?: T;
            };
      };
  seo?:
    | T
    | {
        qa?: T;
        title?: T;
        image?: T;
        description?: T;
        keywords?:
          | T
          | {
              keyword?: T;
              id?: T;
            };
      };
  meta?:
    | T
    | {
        neighbors?: T;
        items?: T;
      };
  related?:
    | T
    | {
        neighbors?: T;
        items?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tokens_select".
 */
export interface TokensSelect<T extends boolean = true> {
  producing?: T;
  title?: T;
  description?: T;
  illustration?: T;
  options?:
    | T
    | {
        icon?: T;
        colors?: T;
      };
  meta?:
    | T
    | {
        neighbors?: T;
        indexes?: T;
      };
  related?:
    | T
    | {
        products?: T;
        neighbors?: T;
        indexes?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "items_select".
 */
export interface ItemsSelect<T extends boolean = true> {
  factoryData?: T;
  factory?: T;
  factoryId?: T;
  updated?: T;
  title?: T;
  description?: T;
  illustration?: T;
  icon?:
    | T
    | {
        custom?: T;
        set?: T;
        icon?: T;
        svg?: T;
        customSvg?: T;
      };
  colors?: T;
  meta?:
    | T
    | {
        neighbors?: T;
        pages?: T;
      };
  related?:
    | T
    | {
        neighbors?: T;
        pages?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "iconifySets_select".
 */
export interface IconifySetsSelect<T extends boolean = true> {
  name?: T;
  prefix?: T;
  packageVersion?: T;
  homepage?: T;
  category?: T;
  total?: T;
  version?: T;
  author?: T;
  license?: T;
  filters?:
    | T
    | {
        prefixes?: T;
        suffixes?: T;
        categories?: T;
      };
  icons?:
    | T
    | {
        width?: T;
        height?: T;
        options?: T;
      };
  categories?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skeletonThemes_select".
 */
export interface SkeletonThemesSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  default?: T;
  enhancements?: T;
  colors?: T;
  source?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "website".
 */
export interface Website {
  id: string;
  title?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "iconify".
 */
export interface Iconify {
  id: string;
  sets?: {
    installed?: string[] | null;
    options?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    nodes?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    updatedAt?: string | null;
  };
  settings?: {
    base?: {
      outputXml?: boolean | null;
    };
    nodes?: {
      clientPath?: string | null;
      packageManager?: ('npm' | 'yarn' | 'pnpm') | null;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skeleton".
 */
export interface Skeleton {
  id: string;
  theme?: (string | null) | SkeletonTheme;
  newTheme?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "website_select".
 */
export interface WebsiteSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "iconify_select".
 */
export interface IconifySelect<T extends boolean = true> {
  sets?:
    | T
    | {
        installed?: T;
        options?: T;
        nodes?: T;
        updatedAt?: T;
      };
  settings?:
    | T
    | {
        base?:
          | T
          | {
              outputXml?: T;
            };
        nodes?:
          | T
          | {
              clientPath?: T;
              packageManager?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skeleton_select".
 */
export interface SkeletonSelect<T extends boolean = true> {
  theme?: T;
  newTheme?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}